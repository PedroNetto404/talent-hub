generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AcademicCourseType {
  // Ensino fundamental
  ELEMENTARY_SCHOOL
  // Ensino médio
  HIGH_SCHOOL
  // Ensino técnico
  TECHNICAL
  //Tecnólogo
  TECHNOLOGIST
  // Graduação
  BACHELOR
  // Pós-graduação
  POSTGRADUATE
  // Mestrado
  MASTER
  // Doutorado
  DOCTORATE
  //Licenciatura
  LICENTIATE
  //Curso livre
  OTHER

  @@map("academic_course_types")
}

enum AcademicStatus {
  // Cursando
  ONGOING
  // Concluído
  COMPLETED
  // Trancado
  LOCKED
  // Interrompido
  INTERRUPTED
}

enum ContractType {
  // Clt
  CLT
  // Pj
  PJ
}

enum EmploymentType {
  // Estágiário
  INTERNSHIP
  // Freelancer
  FREELANCER
  // Efetivo
  EFFECTIVE
  // Temporário
  TEMPORARY
  // Trainee
  TRAINEE
}

enum PositionLevel {
  // Estagiário
  INTERN
  // Júnior
  JUNIOR
  // Pleno
  MID_LEVEL
  // Sênior
  SENIOR
  // Especialista
  SPECIALIST
  // Coordenador
  COORDINATOR
  // Gerente
  MANAGER
  // Diretor
  DIRECTOR
  // CEO
  CEO
}

enum WorkloadType {
  // tempo integral 8h/dia
  FULL_TIME

  // meio período 4h/dia ou outros
  PART_TIME

  // flexível -> sem horário fixo
  FLEXIBLE
}

enum WorkplaceType {
  // Escritório
  OFFICE

  // Remoto
  REMOTE

  // Híbrido
  HYBRID
}

enum Benefit {
  // Vale transporte
  TRANSPORTATION_VOUCHER

  // Vale refeição
  MEAL_VOUCHER

  //Vale Alimentação
  FOOD_VOUCHER

  // Plano de saúde
  HEALTH_INSURANCE

  // Plano odontológico
  DENTAL_PLAN

  // Seguro de vida
  LIFE_INSURANCE

  // Auxílio creche
  DAYCARE_ASSISTANCE

  // Auxílio educação
  EDUCATION_ASSISTANCE

  // Auxílio home office
  HOME_OFFICE_ASSISTANCE

  // Auxílio academia
  GYM_ASSISTANCE

  // Vale combustível
  FUEL_VOUCHER

  // Auxilio psicologico
  PSYCHOLOGICAL_ASSISTANCE
}

enum Role {
  //Administração do sistema
  SYS_ADMIN
  //Candidatos
  CANDIDATE
  //Recrutadores das empresas
  RECRUITER
  //Gerentes das empresas
  MANAGER
}

enum LanguageProficiency {
  // Básico
  BASIC
  // Intermediário
  INTERMEDIATE
  // Avançado
  ADVANCED
  // Fluente
  FLUENT
  // Nativo
  NATIVE
}

enum Proficiency {
  // Básico
  BASIC
  // Intermediário
  INTERMEDIATE
  // Avançado
  ADVANCED
  // Fluente
}

enum SkillType {
  // Técnica
  HARD

  // Comportamental
  SOFT
}

//Conquistas, atividades, cursos, certificados, prêmios, reconhecimentos
enum AchievementType {
  // Certificado de treinamento
  TRAINING_CERTIFICATE
  // Participação em evento
  EVENT_PARTICIPATION
  // Prêmio
  AWARD
  // Reconhecimento
  RECOGNITION
  // Conquista
  ACHIEVEMENT
}

model User {
  id                String    @id @db.VarChar(36) @default(uuid())
  email             String    @unique @db.VarChar(150)
  hashedPassword    String    @map("hashed_password") @db.VarChar(256)
  role              Role
  profilePictureUrl String?   @map("profile_picture_url") @db.VarChar(255)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt         DateTime? @map("deleted_at") @db.Timestamptz

  candidate Candidate?

  @@map("users")
}

model Candidate {
  id                    String          @id @db.VarChar(36) @default(uuid())
  userId                String          @unique @map("user_id") @db.VarChar(36)
  fullName              String          @map("full_name") @db.VarChar(150)
  birthDate             DateTime        @map("birth_date") @db.Date
  phone                 String          @unique @db.VarChar(11)
  address               Json            @db.Json
  cvUrl                 String?         @map("cv_url") @db.VarChar(255)
  bio                   String?         @db.VarChar(500)
  hobbies               String[]        @map("hobbies") @db.VarChar(100)
  linkedinUrl           String?         @map("linkedin_url") @db.VarChar(255)
  githubUrl             String?         @map("github_url") @db.VarChar(255)
  instagramUrl          String?         @map("instagram_url") @db.VarChar(255)
  professionalHeadline  String?         @map("professional_headline") @db.VarChar(100)
  desiredSalary         Float?          @map("desired_salary")
  autoMatchEnabled      Boolean         @map("auth_match_enabled")
  desiredWorkplaceType  WorkplaceType?  @map("desired_workplace_type")
  desiredWorkloadType   WorkloadType?   @map("desired_workload_type")
  desiredEmploymentType EmploymentType? @map("desired_employment_type")
  desiredContractType   ContractType?   @map("desired_contract_type")
  desiredBenefits       Benefit[]       @map("desired_benefits")
  desiredPositionLevel  PositionLevel?  @map("desired_position_level")

  // Relations
  user                    User                              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicExperiences     CandidateAcademicExperience[]
  professionalExperiences CandidateProfessionalExperience[]
  skills                  CandidateSkill[]
  achievements            CandidateAchievement[]
  references              CandidateReference[]
  languages               CandidateLanguage[]

  @@map("candidates")
}

model CandidateLanguage {
  id          String              @id @db.VarChar(36) @default(uuid())
  candidateId String              @map("candidate_id") @db.VarChar(36)
  language    String              @db.VarChar(100)
  written     LanguageProficiency @map("written")
  spoken      LanguageProficiency @map("spoken")
  listening   LanguageProficiency @map("listening")
  reading     LanguageProficiency @map("reading")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([candidateId, language])
  @@map("candidate_languages")
}

model CandidateAcademicExperience {
  id                  String             @id @db.VarChar(36) @default(uuid())
  candidateId         String             @map("candidate_id") @db.VarChar(36)
  institutionName     String             @map("institution_name") @db.VarChar(150)
  institutionUrl      String?            @map("institution_url") @db.VarChar(255)
  type                AcademicCourseType @map("type")
  fieldOfStudy        String             @map("field_of_study") @db.VarChar(100)
  startDate           DateTime           @map("start_date") @db.Date
  endDate             DateTime?          @map("end_date") @db.Date
  description         String?            @db.VarChar(500)
  status              AcademicStatus     @map("status")
  graduationForecast  DateTime?          @map("graduation_forecast")
  semesters           Int?               @map("semesters")
  currentSemester     Int?               @map("current_semester")
  institutionRegistry String?            @map("institution_registry") @db.VarChar(50)

  // Relations
  candidate Candidate                            @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projects  CandidateAcademicExperienceProject[]

  @@map("candidate_academic_experiences")
}

model CandidateAcademicExperienceProject {
  id           String   @id @db.VarChar(36) @default(uuid())
  title        String   @db.VarChar(150)
  description  String?  @db.VarChar(500)
  technologies String[] @map("technologies") @db.VarChar(100)

  // Relations
  candidateAcademicExperienceId String                      @map("candidate_academic_experience_id") @db.VarChar(36)
  candidateAcademicExperience   CandidateAcademicExperience @relation(fields: [candidateAcademicExperienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("candidate_academic_experience_projects")
}

model CandidateProfessionalExperience {
  id               String         @id @db.VarChar(36) @default(uuid())
  candidateId      String         @map("candidate_id") @db.VarChar(36)
  companyName      String         @map("company_name") @db.VarChar(150)
  companyUrl       String?        @map("company_url") @db.VarChar(255)
  role             String         @db.VarChar(100)
  description      String?        @db.VarChar(500)
  startDate        DateTime       @map("start_date") @db.Date
  endDate          DateTime?      @map("end_date") @db.Date
  current          Boolean        @default(false)
  responsibilities String[]       @map("responsibilities") @db.VarChar(100)
  technologies     String[]       @map("technologies") @db.VarChar(100)

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("candidate_professional_experiences")
}

model CandidateSkill {
  id          String      @id @db.VarChar(36) @default(uuid())
  candidateId String      @map("candidate_id") @db.VarChar(36)
  name        String      @map("name") @db.VarChar(100)
  proficiency Proficiency @map("proficiency")
  type        SkillType   @map("type")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([candidateId, name])
  @@map("candidate_skills")
}

model CandidateAchievement {
  id             String          @id @db.VarChar(36) @default(uuid())
  candidateId    String          @map("candidate_id") @db.VarChar(36)
  type           AchievementType @map("type")
  title          String          @db.VarChar(150)
  description    String?         @db.VarChar(500)
  date           DateTime        @db.Date
  certificateUrl String?         @map("certificate_url") @db.VarChar(255)

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("candidate_achievements")
}

model CandidateReference {
  id            String        @id @db.VarChar(36) @default(uuid())
  candidateId   String        @map("candidate_id") @db.VarChar(36)
  name          String        @db.VarChar(150)
  phone         String        @db.VarChar(11)
  email         String        @db.VarChar(150)
  relationship  String        @db.VarChar(100)
  role          String        @db.VarChar(100)
  position      String        @db.VarChar(100)
  positionLevel PositionLevel @map("position_level")
  company       String        @db.VarChar(150)
  companyUrl    String?       @map("company_url") @db.VarChar(255)

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("candidate_references")
}
