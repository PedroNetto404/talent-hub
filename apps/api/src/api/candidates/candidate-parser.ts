import * as uuid from 'uuid';
import moment from 'moment';

import { CandidateParser } from './types/candidate-parse';
import { YearMonth } from '../../types/year-month';

export const candidateParser: CandidateParser = {
    toDatabase: (candidate) => ({
        ...candidate,
        contactEmail: candidate.contact.email,
        contactPhone: candidate.contact.phone,
        ...candidate.social,
        salaryPreference: candidate.preferences.salary,
        contractTypePreference: candidate.preferences.contractType,
        employmentTypePreference: candidate.preferences.employmentType,
        workplaceTypePreference: candidate.preferences.workplaceType,
        benefitsPreference: candidate.preferences.benefits,
        positionLevelPreference: candidate.preferences.positionLevel,
        educationalExperiences: candidate.experiences.education.map((education) => ({
            ...education,
            startYear: education.period.start.year,
            startMonth: education.period.start.month,
            endYear: education.period.end?.year ?? null,
            endMonth: education.period.end?.month ?? null,
            gradePointAverage: Number(education.gradePointAverage),
            expectedGraduationYear: education.expectedGraduation?.year ?? null,
            expectedGraduationMonth: education.expectedGraduation?.month ?? null,
        })),
        professionalExperiences: candidate.experiences.professional.map((experience) => ({
            ...experience,
            startYear: experience.period.start.year,
            startMonth: experience.period.start.month,
            endYear: experience.period.end?.year ?? null,
            endMonth: experience.period.end?.month ?? null,
        })),
    }),

    fromDatabase: (attr) => ({
        id: attr.id,
        userId: attr.userId,
        fullName: attr.fullName,
        birthDate: moment(attr.birthDate).format('YYYY-MM-DD'),
        contact: { email: attr.contactEmail, phone: attr.contactPhone },
        address: attr.address,
        cvUrl: attr.cvUrl,
        about: attr.about,
        professionalHeadline: attr.professionalHeadline,
        bannerUrl: attr.bannerUrl,
        hobbies: attr.hobbies,
        social: {
            linkedin: attr.linkedin,
            github: attr.github,
            twitter: attr.twitter,
            facebook: attr.facebook,
            instagram: attr.instagram,
            youtube: attr.youtube,
            medium: attr.medium,
            website: attr.website,
        },
        isAvailableForWork: attr.isAvailableForWork,
        allowThirdPartyApplications: attr.allowThirdPartyApplications,
        preferences: {
            salary: Number(attr.salaryPreference),
            contractType: attr.contractTypePreference,
            employmentType: attr.employmentTypePreference,
            workplaceType: attr.workplaceTypePreference,
            benefits: attr.benefitsPreference,
            positionLevel: attr.positionLevelPreference,
        },
        experiences: {
            education: attr.educationalExperiences.map((e) => ({
                degree: e.degree,
                fieldOfStudy: e.fieldOfStudy,
                status: e.status,
                type: e.type,
                institution: e.institution,
                institutionWebsite: e.institutionWebsite,
                description: e.description,
                period: {
                    start: { year: e.startYear, month: e.startMonth },
                    end: e.endYear ? ({ year: e.endYear, month: e.endMonth } as YearMonth) : null,
                },
                isCurrent: e.isCurrent,
                semesters: e.semesters,
                currentSemester: e.currentSemester,
                institutionRegistrationNumber: e.institutionRegistrationNumber,
                gradePointAverage: Number(e.gradePointAverage),
                expectedGraduation: e.expectedGraduationYear
                    ? ({
                          year: e.expectedGraduationYear,
                          month: e.expectedGraduationMonth,
                      } as YearMonth)
                    : null,
            })),
            professional: attr.professionalExperiences.map((p) => ({
                title: p.title,
                description: p.description,
                company: p.company,
                employmentType: p.employmentType,
                workplaceType: p.workplaceType,
                positionLevel: p.positionLevel,
                isCurrent: p.isCurrent,
                period: {
                    start: { year: p.startYear, month: p.startMonth } as YearMonth,
                    end: p.endYear ? ({ year: p.endYear!, month: p.endMonth } as YearMonth) : null,
                },
                location: p.location,
                relatedSkills: p.relatedSkills,
            })),
        },
        references: attr.references,
        languages: attr.languages,
        achievements: attr.achievements,
    }),

    newInstance: ({ userId, payload }) => ({
        id: uuid.v4(),
        userId,
        fullName: payload.fullName,
        birthDate: payload.birthDate,
        professionalHeadline: payload.about,
        contact: payload.contact,
        address: payload.address,
        cvUrl: null,
        about: payload.about,
        bannerUrl: null,
        hobbies: payload.hobbies,
        social: payload.social,
        isAvailableForWork: payload.isAvailableForWork,
        allowThirdPartyApplications: payload.allowThirdPartyApplications,
        preferences: payload.preferences,
        experiences: payload.experiences,
        languages: payload.languages,
        references: payload.references,
        achievements: payload.achievements,
    }),
};
